import re
import random
from datetime import datetime
import spacy
from textblob import TextBlob
from googletrans import Translator
import webbrowser
import requests
from spacy.tokens import Doc
from spacy.vocab import Vocab

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
nlp = spacy.load("ru_core_news_lg")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_NAME = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
LOG_FILE = "chat_log.txt"
WEATHER_API_KEY = '7a4443cf1174bbbd8262b389c0e57fda'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á OpenWeatherMap

# –°–ª–æ–≤–∞—Ä–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
patterns = {
    "greeting": r"\b(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|—Ö–µ–π|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä)\b",
    "time": r"\b(–≤—Ä–µ–º—è|–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏|–¥–∞—Ç–∞|–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å)\b",
    "weather": r"\b(–ø–æ–≥–æ–¥–∞|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|–ø—Ä–æ–≥–Ω–æ–∑|–ø–æ–≥–æ–¥–∞ –≤ [–∞-—è—ë\s]+|–ø–æ–≥–æ–¥–∞ –Ω–∞ —É–ª–∏—Ü–µ)\b",
    "name": r"\b(–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç|—Ç–≤–æ—ë –∏–º—è|–∫—Ç–æ —Ç—ã)\b",
    "function": r"\b(—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å|—Ç–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏|—á–µ–º –ø–æ–º–æ—á—å|–ø–æ–º–æ—â—å)\b",
    "math": r"(\d+)\s*([-+*/])\s*(\d+)",
    "search": r"\b(–Ω–∞–π–¥–∏|–ø–æ–∏—Å–∫|–∏—â–∏|–Ω–∞–π—Ç–∏|–≥—É–≥–ª–∏)\s+(.+)",
    "how_are_you": r"\b(–∫–∞–∫ –¥–µ–ª–∞|–∫–∞–∫ –∂–∏–∑–Ω—å|–∫–∞–∫ —Ç—ã|–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)\b",
    "joke": r"\b(–∞–Ω–µ–∫–¥–æ—Ç|—à—É—Ç–∫–∞|—Ä–∞—Å—Å–º–µ—à–∏|–ø–æ—à—É—Ç–∏)\b"
}

responses = {
    "greeting": ["–ü—Ä–∏–≤–µ—Ç!", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME}. –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"],
    "time": ["–°–µ–π—á–∞—Å {time}, —Å–µ–≥–æ–¥–Ω—è {date}.", "–í—Ä–µ–º—è: {time}, –¥–∞—Ç–∞: {date}."],
    "weather": [
        "–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å {temp}¬∞C, {description}.",
        "–ü–æ–≥–æ–¥–∞ –≤ {city}: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C, {description}."
    ],
    "weather_error": [
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'.",
        "–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ'."
    ],
    "name": [f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {BOT_NAME}.", "–Ø ‚Äî –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."],
    "function": [
        "–Ø –º–æ–≥—É: —Å–æ–æ–±—â–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ, –∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.",
        "–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏: –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã, –ø—Ä–æ—Å—Ç—ã–µ —Ä–∞—Å—á–µ—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –ø–ª–æ—Ö–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏."
    ],
    "math": ["–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}.", "–û—Ç–≤–µ—Ç: {result}.", "–ü–æ–ª—É—á–∞–µ—Ç—Å—è {result}."],
    "search": ["–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'.", "–û—Ç–∫—Ä—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: '{query}'."],
    "how_are_you": [
        "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏!",
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ì–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å."
    ],
    "joke": [
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤—Å–µ–≥–¥–∞ —Ö–æ–ª–æ–¥–Ω—ã–π? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ windows –æ—Ç–∫—Ä—ã—Ç—ã!",
        "–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç? –ß–µ—Ä–µ–ø–∞—à—å—è —Å–µ—Ç—å!",
        "–ó–∞—á–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É –∑–µ—Ä–∫–∞–ª–æ? –ß—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É –∫–æ–¥–∞!"
    ],
    "default": [
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é. –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å?",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –µ–≥–æ –ø–æ-–¥—Ä—É–≥–æ–º—É."
    ],
    "sentiment": {
        "positive": ["–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! üòä", "–†–∞–¥, —á—Ç–æ —É –≤–∞—Å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"],
        "negative": ["–ú–Ω–µ –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å...", "–ü–æ—Ö–æ–∂–µ, –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞..."],
        "conflict": ["–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å...", "–ß—É–≤—Å—Ç–≤—É—é –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è..."]
    }
}


def translate_ru_en(text):
    try:
        return translator.translate(text, src='ru', dest='en', timeout=5).text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return ""


def analyze_sentiment_spacy(text):
    doc = nlp(text)

    if not doc.vector_norm:
        return "neutral"

    pos_keywords = nlp("—Ä–∞–¥–æ—Å—Ç—å –≤–æ—Å—Ç–æ—Ä–≥ —Å—á–∞—Å—Ç—å–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ")
    neg_keywords = nlp("–≥—Ä—É—Å—Ç—å –ø–µ—á–∞–ª—å –±–æ–ª—å —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ")

    pos_sim = doc.similarity(pos_keywords) if pos_keywords.vector_norm else 0
    neg_sim = doc.similarity(neg_keywords) if neg_keywords.vector_norm else 0

    if pos_sim - neg_sim > 0.2:
        return "positive"
    elif neg_sim - pos_sim > 0.2:
        return "negative"
    return "neutral"


def analyze_sentiment_textblob(text):
    """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å TextBlob —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–æ–¥"""
    translated = translate_ru_en(text)
    blob = TextBlob(translated)
    polarity = blob.sentiment.polarity

    if polarity > 0.2:
        return "positive"
    elif polarity < -0.2:
        return "negative"
    return "neutral"


def get_combined_sentiment(text):
    """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    spacy_sentiment = analyze_sentiment_spacy(text)
    blob_sentiment = analyze_sentiment_textblob(text)

    if spacy_sentiment == blob_sentiment:
        return spacy_sentiment
    elif spacy_sentiment == "neutral":
        return blob_sentiment
    elif blob_sentiment == "neutral":
        return spacy_sentiment
    else:
        return "conflict"


def extract_entities(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Ç–µ–º"""
    doc = nlp(text)
    entities = {
        'persons': [],
        'locations': [],
        'orgs': [],
        'dates': [],
        'topics': []
    }

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    for ent in doc.ents:
        if ent.label_ == 'PER':
            entities['persons'].append(ent.text)
        elif ent.label_ == 'LOC':
            entities['locations'].append(ent.text)
        elif ent.label_ == 'ORG':
            entities['orgs'].append(ent.text)
        elif ent.label_ == 'DATE':
            entities['dates'].append(ent.text)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º
    topics = {
        '–∏–≥—Ä—ã': ['–∏–≥—Ä–∞', '–≥–µ–π–º', 'steam', '–∏–≥—Ä–æ–≤–æ–π'],
        '–º—É–∑—ã–∫–∞': ['–º—É–∑—ã–∫–∞', '–ø–µ—Å–Ω', '–∞–ª—å–±–æ–º', '–∫–æ–Ω—Ü–µ—Ä—Ç'],
        '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': ['–º–∞—Ç–µ–º–∞—Ç', '–∞–ª–≥–µ–±—Ä', '–≥–µ–æ–º–µ—Ç—Ä', '—É—Ä–∞–≤–Ω–µ–Ω']
    }

    for token in doc:
        lemma = token.lemma_.lower()
        for topic, keywords in topics.items():
            if any(kw in lemma for kw in keywords):
                entities['topics'].append(topic)

    return entities

def log_conversation(user_input, bot_response):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        f.write(f"{timestamp} –í—ã: {user_input}\n")
        f.write(f"{timestamp} {BOT_NAME}: {bot_response}\n")
        f.write("-" * 40 + "\n")

def get_emotional_response(sentiment, text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    if sentiment == "positive":
        return random.choice([
            "–†–∞–¥, —á—Ç–æ —É –≤–∞—Å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
            "–ó–¥–æ—Ä–æ–≤–æ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! üòä"
        ])
    elif sentiment == "negative":
        if "–æ–¥–∏–Ω–æ–∫" in text.lower():
            return "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—è–∂–µ–ª—ã–º. –ü–æ–º–Ω–∏—Ç–µ, –≤—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏ - —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å."
        elif "—É—Å—Ç–∞–ª" in text.lower():
            return "–ü–æ—Ö–æ–∂–µ, –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤."
        else:
            return random.choice([
                "–ú–Ω–µ –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å. –•–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º?",
                "–í–∏–∂—É, –≤–∞–º –≥—Ä—É—Å—Ç–Ω–æ. –ú–æ–∂–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–µ—Ç–µ –º–Ω–µ –æ–± —ç—Ç–æ–º?",
                "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å. –ú–æ–∂–µ—Ç, —à—É—Ç–∫—É —Ä–∞—Å—Å–∫–∞–∂—É?",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö. –•–æ—Ç–∏—Ç–µ, –ø–æ–º–æ–≥—É —Å —á–µ–º-—Ç–æ?"
            ])
    return ""


def translate_city_name(city_ru):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π"""
    try:
        # –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥
        translated = translator.translate(city_ru, src='ru', dest='en').text
        if " " in translated:
            return translated.replace(" ", "%20")

    except:
        return city_ru.replace(" ", "%20")


def get_weather(city_ru):
    """–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞"""
    try:
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥ -> Nizhny Novgorod)
        city_en = translate_city_name(city_ru)

        url = f"http://api.openweathermap.org/data/2.5/weather?q={city_en}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if data['cod'] == 200:
            return True, round(data['main']['temp']), data['weather'][0]['description'].capitalize()

        return False, f"–ì–æ—Ä–æ–¥ '{city_ru}' –Ω–µ –Ω–∞–π–¥–µ–Ω", ""

    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {str(e)}", ""


def extract_city_from_query(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NER –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ regex"""
    doc = nlp(text)

    # –ü–æ–∏—Å–∫ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ NER
    locations = [ent.text for ent in doc.ents if ent.label_ in ("LOC", "GPE")]

    if locations:
        return locations[0].strip().rstrip('–µ').rstrip('—É')  # "–ù–∏–∂–Ω–µ–º" -> "–ù–∏–∂–Ω–∏–π"

    # –£–ª—É—á—à–µ–Ω–Ω—ã–π regex –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    match = re.search(
        r"–ø–æ–≥–æ–¥–∞ –≤ ((?:[–∞-—è—ë]+)(?:\s[–∞-—è—ë-]+)+)",
        text,
        re.IGNORECASE
    )

    if match:
        city = match.group(1)
        # –£–¥–∞–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ç–∏–ø–∞ "–≥–æ—Ä–æ–¥", "—Å–µ–ª–æ" –∏ —Ç.–¥.
        city = re.sub(r"\b(–≥–æ—Ä–æ–¥|–¥–µ—Ä–µ–≤–Ω—è|—Å–µ–ª–æ|–ø–æ—Å—ë–ª–æ–∫)\b", "", city, flags=re.I).strip()
        return city

    return None


def process_math(text):
    """–ò—â–µ—Ç –≤—Å–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ"""
    matches = re.findall(r"(\d+)\s*([-+*/])\s*(\d+)", text)
    results = []
    for match in matches:
        try:
            num1 = float(match[0])
            operator = match[1]
            num2 = float(match[2])

            operations = {
                '+': num1 + num2,
                '-': num1 - num2,
                '*': num1 * num2,
                '/': num1 / num2 if num2 != 0 else "–æ—à–∏–±–∫–∞ (–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å)"
            }

            result = operations.get(operator, "–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
            results.append(f"üî¢ {num1} {operator} {num2} = {result}")
        except:
            continue
    return "\n".join(results) if results else None


def process_message(text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    response_parts = []
    entities = extract_entities(text)
    sentiment = get_combined_sentiment(text)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if re.search(patterns["greeting"], text, re.I):
        response_parts.append(random.choice(responses["greeting"]))

    # –ü–æ–∏—Å–∫
    if search_match := re.search(patterns["search"], text, re.I):
        query = search_match.group(2).strip()
        webbrowser.open(f"https://google.com/search?q={query}")
        response_parts.append(f"üîç –ü–æ–∏—Å–∫: '{query}'")

    # –ü–æ–≥–æ–¥–∞
    if weather_match := re.search(patterns["weather"], text, re.I):
        city = extract_city_from_query(text)
        if city:
            success, temp, desc = get_weather(city)
            if success:
                response_parts.append(f"üå§ {random.choice(responses['weather']).format(city=city, temp=temp, description=desc)}")
            else:
                response_parts.append(f"‚ö† {random.choice(responses['weather_error']).format(city=city)}")

    # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
    if math_response := process_math(text):
        response_parts.append(math_response)

    # –í—Ä–µ–º—è/–¥–∞—Ç–∞
    if re.search(patterns["time"], text, re.I):
        now = datetime.now()
        response_parts.append(f"üïí {now.strftime('%H:%M')}, {now.strftime('%d.%m.%Y')}")

    # –¢–µ–º—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    if entities['topics']:
        topics = list(set(entities['topics']))
        response_parts.append(f"üéÆ –¢–µ–º—ã: {', '.join(topics)}")

    if entities['persons']:
        response_parts.insert(0, f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {entities['persons'][0]}!")

    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
    if sentiment in responses["sentiment"]:
        response_parts.append(f"üé≠ {random.choice(responses['sentiment'][sentiment])}")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    final_response = "\n".join(filter(None, response_parts))
    return final_response if final_response.strip() else random.choice(responses["default"])


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
print(f"{BOT_NAME}: –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –°–∫–∞–∂–∏—Ç–µ '–ø–æ–∫–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

while True:
    user_input = input("–í—ã: ").strip()

    if user_input.lower() in ["–ø–æ–∫–∞", "–≤—ã—Ö–æ–¥"]:
        print(f"{BOT_NAME}: –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        break

    try:
        response = process_message(user_input)
        print(f"{BOT_NAME}: {response}")
    except Exception as e:
        print(f"{BOT_NAME}: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")