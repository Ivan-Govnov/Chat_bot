import re
import random
from datetime import datetime
import spacy
from textblob import TextBlob
from googletrans import Translator
import webbrowser
import requests

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ ============================================
translator = Translator()
nlp = spacy.load("ru_core_news_lg")  # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ ===========================================================
BOT_NAME = "–ß–∞—Ç-–±–æ—Ç"
LOG_FILE = "chat_log.txt"
WEATHER_API_KEY = '7a4443cf1174bbbd8262b389c0e57fda'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á

# –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ================================
TOPICS_CONFIG = {
    '–∏–≥—Ä—ã': ['–∏–≥—Ä–∞', '–≥–µ–π–º', 'steam', '–∏–≥—Ä–æ–≤–æ–π'],
    '–º—É–∑—ã–∫–∞': ['–º—É–∑—ã–∫–∞', '–ø–µ—Å–Ω', '–∞–ª—å–±–æ–º', '–∫–æ–Ω—Ü–µ—Ä—Ç'],
    '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': ['–º–∞—Ç–µ–º–∞—Ç', '–∞–ª–≥–µ–±—Ä', '–≥–µ–æ–º–µ—Ç—Ä', '—É—Ä–∞–≤–Ω–µ–Ω']
}

# –®–∞–±–ª–æ–Ω—ã –∏ –æ—Ç–≤–µ—Ç—ã ===========================================================
PATTERNS = {
    "greeting": r"\b(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|—Ö–µ–π|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä)\b",
    "time": r"\b(–≤—Ä–µ–º—è|–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏|–¥–∞—Ç–∞|–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å)\b",
    "weather": r"\b(–ø–æ–≥–æ–¥–∞|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|–ø—Ä–æ–≥–Ω–æ–∑|–ø–æ–≥–æ–¥–∞ –≤ [–∞-—è—ë\s]+|–ø–æ–≥–æ–¥–∞ –Ω–∞ —É–ª–∏—Ü–µ)\b",
    "name": r"\b(–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç|—Ç–≤–æ—ë –∏–º—è|–∫—Ç–æ —Ç—ã)\b",
    "function": r"\b(—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å|—Ç–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏|—á–µ–º –ø–æ–º–æ—á—å|–ø–æ–º–æ—â—å)\b",
    "math": r"(\d+)\s*([-+*/])\s*(\d+)",
    "search": r"\b(–Ω–∞–π–¥–∏|–ø–æ–∏—Å–∫|–∏—â–∏|–Ω–∞–π—Ç–∏|–≥—É–≥–ª–∏)\s+(.+)",
    "how_are_you": r"\b(–∫–∞–∫ –¥–µ–ª–∞|–∫–∞–∫ –∂–∏–∑–Ω—å|–∫–∞–∫ —Ç—ã|–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)\b",
    "joke": r"\b(–∞–Ω–µ–∫–¥–æ—Ç|—à—É—Ç–∫–∞|—Ä–∞—Å—Å–º–µ—à–∏|–ø–æ—à—É—Ç–∏)\b"
}

RESPONSES = {
    "greeting": ["–ü—Ä–∏–≤–µ—Ç!", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME}. –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"],
    "time": ["–°–µ–π—á–∞—Å {time}, —Å–µ–≥–æ–¥–Ω—è {date}.", "–í—Ä–µ–º—è: {time}, –¥–∞—Ç–∞: {date}."],
    "weather": [
        "–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å {temp}¬∞C, {description}.",
        "–ü–æ–≥–æ–¥–∞ –≤ {city}: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C, {description}."
    ],
    "weather_error": [
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'.",
        "–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ."
    ],
    "name": [f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {BOT_NAME}.", "–Ø ‚Äî –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."],
    "function": [
        "–Ø –º–æ–≥—É: —Å–æ–æ–±—â–∞—Ç—å –≤—Ä–µ–º—è/–¥–∞—Ç—É, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ, –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.",
        "–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏: –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞."
    ],
    "math": ["–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}.", "–û—Ç–≤–µ—Ç: {result}.", "–ü–æ–ª—É—á–∞–µ—Ç—Å—è {result}."],
    "search": ["–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'.", "–û—Ç–∫—Ä—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è: '{query}'."],
    "how_are_you": [
        "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏!",
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ì–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å."
    ],
    "joke": [
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
        "–ö–∞–∫ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É Java –∏ JavaScript? –≠—Ç–æ –∫–∞–∫ –≥–æ—Ä—è—á–∞—è –ø–ª–∏—Ç–∞ –∏ —Å–ª–æ–Ω!",
        "–ü–æ—á–µ–º—É Python –Ω–µ –Ω—É–∂–µ–Ω –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –æ—Ç–ª–∏—á–Ω—ã–µ '–∫–ª–∞—Å—Å—ã'!",
        "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö, –∫–æ–≥–¥–∞ —É—Ö–æ–¥–∏—Ç? '–Ø —Å–∫–æ—Ä–æ commit –≤–µ—Ä–Ω—É—Å—å!'",
        "–ü–æ—á–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª—é–±—è—Ç —Ç–µ–º–Ω—ã–µ —Ç–µ–º—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –±–∞–≥–∏!",
        "–ö–∞–∫–æ–π –ª—é–±–∏–º—ã–π —Ñ—Ä—É–∫—Ç –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞? JS-–∞–ø–µ–ª—å—Å–∏–Ω!",
        "–ü–æ—á–µ–º—É React-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –º–æ–≥ –∑–∞—Å–Ω—É—Ç—å? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –¥—É–º–∞–ª –æ –ø—Ä–æ–ø—Å–∞—Ö –∏ state!"
    ],
    "default": [
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é. –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å?",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –µ–≥–æ –ø–æ-–¥—Ä—É–≥–æ–º—É."
    ],
    "sentiment": {
        "positive": ["–†–∞–¥, —á—Ç–æ –≤–∞–º –≤–µ—Å–µ–ª–æ! üòä", "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"],
        "negative": ["–ú–Ω–µ –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å... –ú–æ–∂–µ—Ç, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –∞–Ω–µ–∫–¥–æ—Ç? üòî",
                     "–ü–æ—Ö–æ–∂–µ, –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞... –•–æ—Ç–∏—Ç–µ –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —à—É—Ç–∫–æ–π?"],
        "conflict": [
            "–ß—É–≤—Å—Ç–≤—É—é –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —ç–º–æ—Ü–∏–∏... –ú–æ–∂–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
            "–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å —Å–º–µ—à–∞–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞. –•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ?"
        ],
        "neutral": ["‚ùì –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", "üí¨ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"]
    }
}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====================================================
def log_conversation(user_input: str, bot_response: str) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ —Ñ–∞–π–ª"""
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        f.write(f"{timestamp} –í—ã: {user_input}\n")
        f.write(f"{timestamp} {BOT_NAME}: {bot_response}\n")
        f.write("-" * 40 + "\n")


# –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ =====================================================
def analyze_sentiment(text: str) -> str:
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ TextBlob —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    try:
        translated = translator.translate(text, src='ru', dest='en').text
        blob = TextBlob(translated)
        polarity = blob.sentiment.polarity

        if polarity > 0.2:
            return "positive"
        elif polarity < -0.2:
            return "negative"
        return "neutral"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return "neutral"


def extract_entities(text: str) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–º—ã —á–µ—Ä–µ–∑ spaCy"""
    doc = nlp(text)
    entities = {
        'persons': [ent.text for ent in doc.ents if ent.label_ == 'PER'],
        'locations': [ent.text for ent in doc.ents if ent.label_ in ('LOC', 'GPE')],
        'orgs': [ent.text for ent in doc.ents if ent.label_ == 'ORG'],
        'dates': [ent.text for ent in doc.ents if ent.label_ == 'DATE'],
        'verbs': [token.lemma_ for token in doc if token.pos_ == 'VERB'],
        'topics': []
    }
    # –í—ã—è–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∫ —á–µ—Ä–µ–∑ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—é
    for token in doc:
        lemma = token.lemma_.lower()
        for topic, keywords in TOPICS_CONFIG.items():
            if any(kw in lemma for kw in keywords):
                entities['topics'].append(topic)

    return entities


# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==============================================
def handle_time() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É"""
    now = datetime.now()
    return f"üïí {now.strftime('%H:%M')}, {now.strftime('%d.%m.%Y')}"


def handle_math(text: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
    matches = re.findall(r"(\d+)\s*([-+*/])\s*(\d+)", text)
    results = []

    for match in matches:
        try:
            num1, op, num2 = match
            operations = {
                '+': float(num1) + float(num2),
                '-': float(num1) - float(num2),
                '*': float(num1) * float(num2),
                '/': float(num1) / float(num2) if num2 != '0' else "–æ—à–∏–±–∫–∞ (–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å)"
            }
            result = operations.get(op, "–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
            results.append(f"üî¢ {num1} {op} {num2} = {result}")
        except Exception as e:
            continue

    return "\n".join(results) if results else ""


def handle_search(text: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    if match := re.search(PATTERNS["search"], text, re.I):
        query = match.group(2).strip()
        webbrowser.open(f"https://google.com/search?q={query}")
        return f"üåê {random.choice(RESPONSES['search']).format(query=query)}"
    return ""


def handle_function_info() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞"""
    return random.choice(RESPONSES["function"])


def handle_name() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–º–µ–Ω–∏ –±–æ—Ç–∞"""
    return random.choice(RESPONSES["name"])

def translate_city_name(city_ru):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π"""
    try:
        # –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥
        translated = translator.translate(city_ru, src='ru', dest='en').text
        if " " in translated:
            return translated.replace(" ", "%20")

    except:
        return city_ru.replace(" ", "%20")


def extract_city_from_query(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NER –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ regex"""
    doc = nlp(text)

    # –ü–æ–∏—Å–∫ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ NER
    locations = [ent.text for ent in doc.ents if ent.label_ in ("LOC", "GPE")]

    if locations:
        return locations[0].strip().rstrip('–µ').rstrip('—É')  # "–ù–∏–∂–Ω–µ–º" -> "–ù–∏–∂–Ω–∏–π"

    # –£–ª—É—á—à–µ–Ω–Ω—ã–π regex –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    match = re.search(
        r"–ø–æ–≥–æ–¥–∞ –≤ ((?:[–∞-—è—ë]+)(?:\s[–∞-—è—ë-]+)+)",
        text,
        re.IGNORECASE
    )

    if match:
        city = match.group(1)
        # –£–¥–∞–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ç–∏–ø–∞ "–≥–æ—Ä–æ–¥", "—Å–µ–ª–æ" –∏ —Ç.–¥.
        city = re.sub(r"\b(–≥–æ—Ä–æ–¥|–¥–µ—Ä–µ–≤–Ω—è|—Å–µ–ª–æ|–ø–æ—Å—ë–ª–æ–∫)\b", "", city, flags=re.I).strip()
        return city

    return None


def get_weather(city_ru):
    """–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞"""
    try:
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        city_en = translate_city_name(city_ru)

        url = f"http://api.openweathermap.org/data/2.5/weather?q={city_en}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if data['cod'] == 200:
            return True, round(data['main']['temp']), data['weather'][0]['description'].capitalize()

        return False, f"–ì–æ—Ä–æ–¥ '{city_ru}' –Ω–µ –Ω–∞–π–¥–µ–Ω", ""

    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {str(e)}", ""

def handle_joke() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É"""
    return f"üé≠ {random.choice(RESPONSES['joke'])}"


def handle_sentiment(sentiment: str) -> str:
    """–û—Ç–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    return random.choice(RESPONSES["sentiment"].get(sentiment, [""]))


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π =========================================
def process_message(text: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –Ω–æ–≤—ã–º –ø–æ—Ä—è–¥–∫–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    response_parts = []
    entities = extract_entities(text)
    sentiment = analyze_sentiment(text)

    # 1. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ç–µ–º—ã)
    if entities['persons']:
        response_parts.append(f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {entities['persons'][0]}!")

    if unique_topics := list(set(entities['topics'])):
        response_parts.append(f"üéÆ –¢–µ–º—ã: {', '.join(unique_topics)}")

    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    command_handlers = [
        (PATTERNS["greeting"], lambda: random.choice(RESPONSES["greeting"])),
        (PATTERNS["time"], handle_time),
        (PATTERNS["name"], handle_name),
        (PATTERNS["function"], handle_function_info),
        (PATTERNS["how_are_you"], lambda: random.choice(RESPONSES["how_are_you"])),
        (PATTERNS["joke"], handle_joke)
    ]

    for pattern, handler in command_handlers:
        if re.search(pattern, text, re.I):
            response_parts.append(handler())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è
    if math_response := handle_math(text):
        response_parts.append(math_response)

    if search_response := handle_search(text):
        response_parts.append(search_response)

    if weather_match := re.search(PATTERNS["weather"], text, re.I):
        city = extract_city_from_query(text)
        if city:
            success, temp, desc = get_weather(city)
            if success:
                response_parts.append(f"üå§ {random.choice(RESPONSES['weather']).format(city=city, temp=temp, description=desc)}")
            else:
                response_parts.append(f"‚ö† {random.choice(RESPONSES['weather_error']).format(city=city)}")

    # 3. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–π)
    if sentiment_response := handle_sentiment(sentiment):
        response_parts.append(sentiment_response)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    final_response = "\n".join(filter(None, response_parts))
    return final_response if final_response.strip() else random.choice(RESPONSES["default"])


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ ==========================================================
if __name__ == "__main__":
    print(f"{BOT_NAME}: –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –°–∫–∞–∂–∏—Ç–µ '–ø–æ–∫–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

    while True:
        user_input = input("–í—ã: ").strip()

        if user_input.lower() in ["–ø–æ–∫–∞", "–≤—ã—Ö–æ–¥"]:
            print(f"{BOT_NAME}: –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        try:
            response = process_message(user_input)
            print(f"{BOT_NAME}: {response}")
            log_conversation(user_input, response)
        except Exception as e:
            print(f"{BOT_NAME}: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")